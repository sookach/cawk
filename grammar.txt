translation-unit:
	declaration-seq

declaration-seq:
	declaration
	declaration-seq declaration

declaration:
	rule-declaration
	function-declaration

rule-declaration:
	expression compound-statement?
	(BEGIN | END) compound-statement
	compound-statement

function-declaration
	'function' identifier '(' param-list? ')' compound-statement

param-list:
	identifier
	param-list ',' identifier

statement:
	block-statement
	basic-statement
	';'

basic-statement:
	'break'
	'continue'
	expression
	'exit' expression?
	'next'
	'nextfile'
	'return' expression?
	do-statement
	print-statement

block-statement:
	compound-statement
	for-statement
	if-statement
	while-statement

compound-statement:
	'{' statement-sequence '}'

for-statement:
	'for' '(' identifier 'in' identifier ')' statement
	'for' '(' (print-statement | expression)? ';' expression? ';' (print-statement | expression)? ')' statement

if-statement:
	'if' '(' expression ')' statement ('else' statement)?

while-statement:
	'while' '(' expression ')' statement

statement-sequence:
	statement
	statement-sequence (block-statement | simple-statement eol)

eol:
	'\n' | ';'
	eol ('\n' | ';')

do-statement:
	'do' statement 'while' '(' expression ')'

print-statement:
	'print' expression-list?
	'print' '(' expression-list? ')'
	'printf' expression-list?
	'printf' '(' expression-list? ')'

expression-list:
    expression
    expression-list ',' expression

expression:
    assignment-expression

primary-expression:
    identifier
    literal
    lambda-expression
    '(' expression ')'

postfix-expression:
    primary-expression
    postfix-expression '[' expression-list ']'
    postfix-expression '(' expression-list? ')' 
    // No space between postfix-expression and '('

field-reference-expression:
    primary-expression
    '$' field-reference-expression

unary-expression:
    field-reference-expression
    ('++' | '--') unary-expression
    unary-expression ('++' | '--')

exponential-expression:
    unary-expression
    exponential-expression ('**' | '^') unary-expression

negative-expression:
    exponential-expression
    ('!' | '-') unary-expression

multiplicative-expression:
    unary-expression
    multiplicative-expression  ('*' | '/' | '%') unary-expression

additive-expression:
    multiplicative-expression
    additive-expression ('+' | '-') multiplicative-expression

string-concatenation-expression:
    additive-expression
    string-concatenation-expression additive-expression

comparison-expression:
    string-concatenation-expression
    comparison-expression 
        ('<' | '<=' | '==' | '!=' | '>' | '>=' | '>>')
        string-concatenation-expression

matching-expression:
    comparison-expression
    matching-expression ('~' | '!~') comparison-expression

membership-expression:
    matching-expression
    membership-expression 'in' matching-expression

logical-and-expression:
    membership-expression
    logical-and-expression '&&' membership-expression

logical-or-expression:
    logical-and-expression
    logical-or-expression '||' logical-and-expression

assignment-expression:
    logical-or-expression
    unary-expression 
        ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '**=' ) 
        assignment-expression
================================================================================
Users' Reference to CAWK
================================================================================

Andrew Sukach

This manual assumes that the reader is already somewhat familiar with AWK. As
such, it mostly focuses on the differences with CAWK.

Unlike AWK, CAWK is statically typed, and provides the following types:

Primitive Types

i8   - 8 bit signed integer
i16  - 16 bit signed integer
i32  - 32 bit signed integer
i64  - 64 bit signed integer
i128 - 128 bit signed integer

u8   - 8 bit unsigned integer
u16  - 16 bit unsigned integer
u32  - 32 bit unsigned integer
u64  - 64 bit unsigned integer
u128 - 128 bit unsigned integer

f32 - 32 bit IEEE 754 single precision floating point number
f64 - 64 bit IEEE 754 double precision floating point number

string - a dynamic sequence of characters.

Built-in Data Structures

slice - a dynamic sequence
set - an ordered set of unique objects
map - an ordered map of unique keys to values
hset - a hash set
hmap - a hash table

This containers are templated, meaning the user must defined the types they
hold by as <container>![<type>]

Here are a few examples of declarations

i32 x = 1;
f32 y = 1.5;
string z = "cawk";
slice![i32] w = {1, 2, 3, 4, 5};
hmap![string, u64] u;

These examples bring up another important point - statements in CAWK must end
with a semicolon (whereas in AWK either a semicolon or newline was appropriate).

Data in CAWK is scoped. The top level (global) scope only allows declarations of
rules, functions, and varaibles. The former two only are only ever allowed in
the global scope.

Rule declarations are the same as in AWK.

Functions, however are slightly different. As previously mentioned CAWK employs
scoping, so variables are not implicitly shared across functions (unless they
are declared in the global scope). Additionally, a function that returns a value
must have right arrow (->) before the opening brace.

Examples of function definitions.

function greet() { print "hello"; }

function add(x, y) -> { return x + y; }

Although, CAWK is statically scoped, neither the types of the parameters nor the
return type must be specified.

Arguments in CAWK are passed by value by default. To pass by reference, the
parameter must be preface with an ampersand in the function signature.

Tying the last several points together, here is an example of a valid CAWK
program.

# Function prints "hello Andrew" and exits.

string name = "Andrew";

function greet() { print "hello", name; }

BEGIN { greet(); }

In almost all cases, variables must be defined before referencing them. The only
exception is the global scope, where order of definition does not matter (so
long as all referenced variables are eventually defined).

# Still works

BEGIN { greet(); }

function greet() { print "hello", name; }

string name = "Andrew";

Operators

CAWK has most of the same arithmetic operators as POSIX AWK, with a few notable
exceptions:

&  |  ^  ~ >> <<

are bitwise and, or, xor, complement, right/left shift respectively. As well as
the equivalent assignment operators:

&= |= ^= ~= >>= <<=

** - exponentation operator

x ** y is equivalent to x ^ y in POSIX AWK (note that GNU AWK also has ** as an
exponentiation operator)

// - exponentation (root) operator

x // y is equivalent to x ** (1 / y), just provides a more concise syntax.

Some Example Programs (Just to give a taste of CAWK)

# Return a string representation of some decimal number x, converted to base y
function base(x, y) -> {
	string s = ![string](x % y);
	if (x / y != 0)
		s += base(x / y, y);
	return s;
}

# Calculates the nth element in the fibonacci sequence.
function fib(n) -> {
	# Will update once I implement switch statements.
	if (n == 0)
		return 0;
	if (n == 1 || n == 2)
		return 1;
	return fib(n - 1) + fib(n - 2);
}

# Using memoization
hmap![i32, i32] h;

function fib(n) -> {
	if (n == 0)
		return 0;
	if (n == 1 || n == 2)
		return 1;
	return fib(n - 1) + fib(n - 2);

	if (h[n] == 0)
		h[n] = fib(n - 1) + fib(n - 2);

	return h[n];
}

# Heapsort

# note the array is passed by reference
function heap_sort(&a) {
	for (i32 i = length(a) / 2; i >= 0; --i)
		heapify(a, length(a), i);
	
	for (i32 i = length(a) - 1; i > 0; --i) {
		swap_(a[0], a[i]);
		heapify(a, i, 0);
	}
}

function heapify(&a, n, i) {
	for (; i * 2 + 1 < n;) {
		i32 j = i;

		if (a[i * 2 + 1] > a[i])
			j = i * 2 + 1;

		if (i * 2 + 2 < n && a[i * 2 + 2] > a[j])
			j = i * 2 + 2;

		if (i == j)
			break;

		swap_(a[i], a[j]);
		i = j;
	}
}